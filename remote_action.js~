var dropbox = document.getElementById("dropbox");
var progress = document.getElementById("progressbar");
var bg = document.getElementById("background");

dropbox.addEventListener('dragenter', handleDragEnter, false);
dropbox.addEventListener('dragover', handleDragOver, false);
dropbox.addEventListener('dragleave', handleDragLeave, false);
dropbox.addEventListener('drop', handleDrop, false);


// mouse over image
document.getElementsByTagName("body")[0].addEventListener('mouseover', function(e){
	var t = e.target;
	if(t.tagName.toLowerCase() == 'img' && t.getAttribute('id') == null){
		var parent = t.parentNode.parentNode;
		parent.childNodes[1].style.display="inline";
		parent.childNodes[2].style.display="inline";
		t.style.border="solid 2px red";
	}else if(t.innerHTML == "E" || t.innerHTML == "X"){
		t.parentNode.childNodes[1].style.display="inline";
		t.parentNode.childNodes[2].style.display="inline";
		t.parentNode.childNodes[0].childNodes[0].style.border="solid 2px red";
	}
}, false);

// mouse out image
document.getElementsByTagName("body")[0].addEventListener('mouseout', function(e){
	var t = e.target;
	if(t.tagName.toLowerCase() == 'img' && t.getAttribute('id') == null){
		var parent = t.parentNode.parentNode;
		parent.childNodes[1].style.display="none";
		parent.childNodes[2].style.display="none";
		t.style.border="0px";
	}
}, false);

// click action
document.getElementsByTagName("body")[0].addEventListener('click', function(e){
	var t = e.target;
	if(t.tagName.toLowerCase() == 'img' && t.getAttribute('id') == null){
		inspectHandler(t);
		console.log("image\n");
	}else if(t.innerHTML == "E"){
		console.log("edit\n");
		editHandler(t);
	}else if(t.innerHTML == "X"){
		console.log("delete\n");
		deleteHandler(t);
	}else if(t.getAttribute('id') != null && t.getAttribute('id').toLowerCase() == 'background'){
		console.log("cancel bg\n");
		console.log(t);
		exitBgHandler(t);
	}else{
		console.log("no action");
		return;
	}
}, false);



// drag handlers

function handleDragEnter(e){
	if(e.stopPropagation)
		e.stopPropagation();
	return false;
}

function handleDragOver(e){
	if(e.stopPropagation)
		e.stopPropagation();
	e.preventDefault();
	dropbox.style.border="Solid 2px #999";
	
	return false;
}

function handleDragLeave(e){
	if(e.stopPropagation)
		e.stopPropagation();
	e.preventDefault();
	dropbox.style.border="Solid 0px blue";
	return false;
}

function handleDrop(e){
	if(e.stopPropagation)
		e.stopPropagation();
	e.preventDefault();

	// append image data
	var files = e.dataTransfer.files;
	var formData = new FormData();
	for(var i = 0; i < files.length; i++){
		formData.append('file', files[i]);
	}
	
	// reg ajax
	var xhr = new XMLHttpRequest();
	xhr.onreadystatechange = function(){	
		if(xhr.readyState == 4 && xhr.status == 200){
			//append image
			if(xhr.responseText == "error"){
				document.getElementById('feedback').innerHTML = "Error! Please upload a image!";
				return;
			}
			var imgs = document.getElementsByTagName('img');
			for(var i = 0; i < imgs.length; i++){
				if(xhr.responseText.indexOf(imgs[i].getAttribute('src')) != -1){
					console.log("ok"+i);
					var img = imgs[i];
					var box = img.parentNode.parentNode;
					box.parentNode.removeChild(box);
					break;
				}
			}				

			var div_element = document.createElement("div");
			var img_element = document.createElement("div");
			var edit_element = document.createElement("span");
			var delete_element = document.createElement("span");
			
			img_element.innerHTML = xhr.responseText;
			edit_element.innerHTML = 'E';
			delete_element.innerHTML = 'X';

			div_element.appendChild(img_element);
			div_element.appendChild(edit_element);
			div_element.appendChild(delete_element);

			var panel = document.getElementById("display");
			var first = panel.childNodes[0];
			panel.insertBefore(div_element, first);
		}
	}

	xhr.open('POST', './insert.php');
	xhr.onload = function(){
		setTimeout(function(){progress.value = 0;}, 300);
	};

	// handle process bar
	xhr.upload.onprogress = function(e){
		if(e.lengthComputable){
			var complete = (e.loaded/ e.total * 100 | 0);
			progress.value = progress.innerHTML = complete;

		}
	}

	// send request
	xhr.send(formData);
	return false;
}


// edit and delete

function editHandler(target){
	var description = prompt("Enter the description:");
	if(description == null){
		return;
	}
	// get file name
	var img = target.parentNode.childNodes[0].childNodes[0];
	img.setAttribute("title", description);
	var src = img.getAttribute('src');
	var tmp = src.indexOf("thumb-");
	filename = src.substring(tmp+6);

	// send request
	var xhr = new XMLHttpRequest();
	xhr.open("GET", "./edit.php?filename="+filename+"&description="+description, true);
	xhr.send();
	return false;
}	

function deleteHandler(target){
	if(!confirm("Are you sure to delete this photo?")){
		return;
	}

	//get file name
	var img = target.parentNode.childNodes[0].childNodes[0];
	var src = img.getAttribute('src');
	var tmp = src.indexOf("thumb-");
	var filename = src.substring(tmp+6);
	
	// delete element
	var box = target.parentNode;
	box.parentNode.removeChild(box);	

	var xhr = new XMLHttpRequest();
	xhr.open("GET", "./delete.php?filename="+filename, true);
	xhr.send();
	return false;
}	

function exitBgHandler(target){
	bg.style.display = "none";

	// re-enable mouse wheel
	document.removeEventListener('mousewheel', disableWheel, false);	
}

function inspectHandler(target){
	showFrontLayer();

	// get file name
	var src = target.getAttribute('src');
	var tmp = src.indexOf("thumb-");
	var filename = src.substring(tmp+6);
	var path = "./upload/"+filename;
	
	// load image
	var center = document.getElementById('center');

	center.style.left = "-99999px"
	center.innerHTML = "<img id=image draggable=true src=" + path +">";

	var image = document.getElementById('image');

	image.onload= function(){
		// adjust height and width
		var ratio = image.height / image.width;
		if(image.height > window.innerHeight * 0.7){
			image.style.height = window.innerHeight * 0.7 + "px" ;
			image.style.width = image.height / ratio + "px";
		}
		if(image.width > window.innerWidth * 0.7){
			image.style.width = window.innerWidth * 0.7 + "px";
			image.style.height = image.width * ratio + "px";
		}
		center.style.left = (window.innerWidth - image.width) / 2 + "px";	
		center.style.top = (window.innerHeight - image.height) / 2 + "px";	
		center.style.width = image.width;
		center.style.height = image.height;
		document.getElementById('row-2').style.height = image.height + "px";
		document.getElementById('n').style.width = image.width + "px";
		document.getElementById('s').style.width = image.width + "px";
	}
	
}


function showFrontLayer(){
	bg.style.display = "block";
	bg.style.width = window.innerWidth +"px";
	bg.style.height = window.innerHeight +"px";
	bg.style.top = window.pageYOffset+"px";
	bg.style.left = window.pageXOffset+"px";

	document.addEventListener('mousewheel', disableWheel, false);	
}

function disableWheel(e){
	e.preventDefault();
}


/*******************************
     		copying

*******************************/



function MenuEvent(target, type, func, prop)
{
	if(type && ((typeof type) != "string"))
		return null;
	if(target && ((typeof target) != "object"))
		return null;
	if(func && ((typeof func) != "function"))
		return null;
	if(prop && ((typeof prop) != "boolean"))
		return null;

	this.evType		= type;
	this.evTarget		= target;
	this.evListener		= func;
	this.evPropagate	= prop;

	return this;
}

Menu4140.array = new Array();

// Global constants

Menu4140.initX = 50;
Menu4140.initY = 50;
Menu4140.initMoveX = 0;
Menu4140.initMoveY = 0;

Menu4140.CSS_tableClass	= "pop_dialog_table";
Menu4140.CSS_TDNW	= "pop_topleft";
Menu4140.CSS_TDN	= "pop_border pop_top";
Menu4140.CSS_TDNE	= "pop_topright";
Menu4140.CSS_TDW	= "pop_border pop_sideleft";
Menu4140.CSS_TDCENTER	= "pop_content";
Menu4140.CSS_TDE	= "pop_border pop_sideright";
Menu4140.CSS_TDSW	= "pop_bottomleft";
Menu4140.CSS_TDS	= "pop_border pop_bottom";
Menu4140.CSS_TDSE	= "pop_bottomright";

Menu4140.CSS_TD	= [
	"pop_topleft",
	"pop_border pop_top",
	"pop_topright",
	"pop_border pop_sideleft",
	"pop_content",
	"pop_border pop_sideright",
	"pop_bottomleft",
	"pop_border pop_bottom",
	"pop_bottomright"
];

Menu4140.hiddenDIVBorderColor	= "#aaaaaa";
Menu4140.hiddenDIVBgColor 	= "#cccccc";
Menu4140.hiddenDIVBorderWidth	= "1px";
Menu4140.hiddenOpacity		= 0.4;
Menu4140.menubarColor		= "#3366ff";
Menu4140.menubarButtonColor	= "red";

// Helper functions

function getZIndex(obj)
{
	if(obj && obj.style && obj.style.zIndex)
		return parseInt(obj.style.zIndex);
	return null;
}

function Menu4140()
{
	this.__element_to_drag = null;		// Usually, this is the hidden div.
	this.__element_to_click = null;		// Usually, this is the menu bar.
	this.__diff_x = 0;			// Record the difference in coordinates
	this.__diff_y = 0;			// Same as the above
	this.__closing_function = null;		// This function should be passed by the the caller. Else, this should be "null".
	this.__id = null;			// The id of the base DIV being displayed.
	this.__hidden_div = null;		// The hidden div. It appears during drag-and-drop as well as resizing.
	this.__body = null;			// The body of the HTML document, if any.
	this.__center_div = null;		// The DIV stored by the center TD element.
	this.__base_table = null;		// The table for displaying the border.
	this.__menuEventArray = null;

	var myself = this;			// The reference of this object for the callback functions.


    /*****************************************\
     **                                     **
     **  Handling change of Z-Index begins  **
     **                                     **
    \*****************************************/


	function bringWindowToFront_adjustZIndex(obj)
	{
		var target = obj.__element_to_drag;

		var my_zIndex = getZIndex(target);
		if(my_zIndex == null)
			my_zIndex = 0;
		
		for(var i = 0; i < Menu4140.array.length; i++)
		{
			var tempZIndex = getZIndex(Menu4140.array[i].__element_to_drag);
			if(tempZIndex > my_zIndex)
			{
			//  This is to ensure that we keep the relative positions of the layers so that...
			//  we don't mess up the original order.

				Menu4140.array[i].__element_to_drag.style.zIndex = new String(tempZIndex - 1);
			}
		}

		target.style.zIndex = new String(Menu4140.array.length);
	}

	function removeWindow_adjustZIndex(obj)
	{
		var target = obj.__element_to_drag;
		var i, j, zIndex = getZIndex(obj);
		for(i = 0; i < Menu4140.array.length; i++)
		{
			if(Menu4140.array[i] == obj)
			{
				j = i;
				break;
			}
		}

		var startCopy = false, copyOffset = 0;
		for(i = 0; i < Menu4140.array.length-1; i++)
		{
			if(i == j)
			{
				startCopy = true;
				copyOffset = 1;
			}

			var tempZIndex = getZIndex(Menu4140.array[i+copyOffset].__element_to_drag);
			if(tempZIndex > zIndex)
				Menu4140.array[i+copyOffset].__element_to_drag.style.zIndex = tempZIndex - 1;

		    // move the element behind

			if(startCopy)
				Menu4140.array[i] = Menu4140.array[i+1];
		}

		Menu4140.array[i].length--;
	}


    /*****************************************\
     **                                     **
     **   Handling change of Z-Index ends   **
     **                                     **
    \*****************************************/


	this.__bringToFrontEventHandler = function(e)
	{
		bringWindowToFront_adjustZIndex(myself);
	};

	this.__dragEventHandler = function(e)
	{
	//// It is important to register the event type first. ////

		e.stopPropagation();
		e.preventDefault();

		var start_x	= e.clientX;
		var start_y	= e.clientY;
		var orig_x	= myself.__element_to_drag.offsetLeft;
		var orig_y	= myself.__element_to_drag.offsetTop;

		myself.__diff_x	= start_x - orig_x;
		myself.__diff_y	= start_y - orig_y;

	    //// bring this menu to the front

		bringWindowToFront_adjustZIndex(myself);

	    //// create an event for the hidden DIV.

		try {
			var new_e = document.createEvent("Events");
			new_e.initEvent(e.type, false, false);
			myself.__hidden_div.dispatchEvent(new_e);
		}
		catch (ex)
		{
			alert(ex);
			alert("\"" + e.type + "\"");
		}

	};  /* end of function */

	this.__hiddenDragEventHandler = function (e)
	{
		e.stopPropagation();
		e.preventDefault();

	    //// Set the style of the hidden DIV.
	    //// The hidden DIV doesn't have any idea about the dimension of the base DIV.

		myself.__hidden_div.style.zIndex = new String(Menu4140.array.length + 1);
		myself.__hidden_div.style.width = new String(myself.__element_to_drag.offsetWidth) + "px";
		myself.__hidden_div.style.height = new String(myself.__element_to_drag.offsetHeight) + "px";
		myself.__hidden_div.style.left = myself.__element_to_drag.offsetLeft + "px";
		myself.__hidden_div.style.top = myself.__element_to_drag.offsetTop + "px";
		myself.__hidden_div.style.display = "inline";
		myself.__hidden_div.style.cursor = "move";

	    //// Set the event listeners of the hidden DIV depending on the EVENT TYPE

		var hidden_mousemove_listener	= null;
		var hidden_mouseup_listener	= null;
		var body_mousemove_listener	= null;
		var window_mousemove_listener	= null;

		if(myself.__menuEventArray == null)
			myself.__menuEventArray = new Array();
		myself.__menuEventArray.length = 0;

		myself.__menuEventArray.push(
			new MenuEvent(
				myself.__hidden_div,
				"mousemove",
				myself.__moving_drag_EventHandler,
				false)
			);
		myself.__menuEventArray.push(
			new MenuEvent(
				myself.__hidden_div,
				"mouseup",
				myself.__undragEventHandler,
				false)
			);
		myself.__menuEventArray.push(
			new MenuEvent(
				myself.__body,
				"mousemove",
				myself.__moving_drag_EventHandler,
				false)
			);
		myself.__menuEventArray.push(
			new MenuEvent(
				window,
				"mousemove",
				myself.__outOfBound,
				false)
			);
		myself.__menuEventArray.push(
			new MenuEvent(
				window,
				"mouseup",
				myself.__undragEventHandler,
				false)
			);

	    //// Registers the event in a loop.

		for(var i = 0; i < myself.__menuEventArray.length; i++)
		{
			var temp = myself.__menuEventArray[i];
			if(temp == null)
			{
				alert("Bug appeared!")
				continue;
			}
			temp.evTarget.addEventListener(temp.evType, temp.evListener, temp.evPropagation);
		}

	};  /* end of function */

	this.__outOfBound = function(e)
	{
		e.stopPropagation();
		e.preventDefault();

		myself.__moveBoundChecking(e);

	};  /* end of function */


	this.__moving_drag_EventHandler = function(e) 
	{
		e.stopPropagation();
		e.preventDefault();

		myself.__moveBoundChecking(e);

	};  /* end of function */

	this.__moveBoundChecking = function (e)
	{
		var padding		= 10;
		var trueX 		= e.clientX - myself.__diff_x;
		var trueY 		= e.clientY - myself.__diff_y;
		var left_bound		= 0;
		var top_bound		= 0;
		var right_bound 	= window.innerWidth;
		var bottom_bound 	= window.innerHeight;
		var divW 		= parseInt(myself.__hidden_div.style.width) + 2 * parseInt(Menu4140.hiddenDIVBorderWidth);
		var divH		= parseInt(myself.__hidden_div.style.height) + 2 * parseInt(Menu4140.hiddenDIVBorderWidth);

	    /****
		Step (1) Check the left bound;
		Step (2) Check the right bound;
		Step (3) Otherwise...
	     ****/

		if(trueX < 0)
			myself.__hidden_div.style.left = new String(left_bound + padding) + "px";
		else if((trueX + divW + padding) > right_bound)
			myself.__hidden_div.style.left = new String(right_bound - divW - padding) + "px";
		else
			myself.__hidden_div.style.left = trueX + "px";

	    /****
		Step (1) Check the upper bound;
		Step (2) Check the lower bound;
		Step (3) Otherwise...
	     ****/

		if(trueY < 0)
			myself.__hidden_div.style.top = new String(top_bound + padding) + "px";
		else if((trueY + divH + padding) > bottom_bound)
			myself.__hidden_div.style.top = new String(bottom_bound - divH - padding) + "px";
		else
			myself.__hidden_div.style.top = trueY + "px";

		/*
		myself.__hidden_div.innerHTML = 
			"<P> __moveBoundChecking<br>" 
			+ e.currentTarget
			+  "<br>left: " 
			+ myself.__hidden_div.style.left
			+  "<br>top: " 
			+ myself.__hidden_div.style.top 
			+ "</P>";
		*/

	};  /* end of function */


	this.__undragEventHandler = function(e)
	{
		e.stopPropagation();
		e.preventDefault();

		myself.__hidden_div.style.cursor = "";

	    //// Unregister all the event listeners.
	    ////  use pop() to read out the element and empty the array at the same time.

		var temp;
		while((temp = myself.__menuEventArray.pop()) != null)
			temp.evTarget.removeEventListener(temp.evType, temp.evListener, temp.evPropagation);

	    //// Set the position and the dimension of the base DIV.

		myself.__element_to_drag.style.left = myself.__hidden_div.offsetLeft + "px";
		myself.__element_to_drag.style.top = myself.__hidden_div.offsetTop + "px";
		myself.__element_to_drag.style.width = parseInt(myself.__hidden_div.style.width) + "px";
		myself.__element_to_drag.style.height = parseInt(myself.__hidden_div.style.height) + "px";

	    //// Set the hidden DIV as invisible.

		myself.__hidden_div.style.display = "none";

	};  /* end of function */


	this.__preCloseDiv = function (e)
	{
	/****
	    Do nothing...so that nothing would happen when dragging on the 'X' button.
	 ****/

		e.stopPropagation();
		e.preventDefault();

	};  /* end of function */


	this.__closeDivEventHandler = function (e)
	{
	/****
	    Step (1): invoke the callback function.
	    Step (2): set the Z-index of other DIVs and remove "myself" from Menu4140.array. 
	    Step (3): set the entire DIV as invisible.
	    Step (4): remove the entire OBJ sub-tree, which is spanning from the base DIV.
	 ****/
		if(myself.__closing_function)
			myself.__closing_function();

		removeWindow_adjustZIndex(myself);

	//	document.getElementById(myself.__id).style.display = "none";
		myself.__body.removeChild(myself.__element_to_drag);
		myself.__element_to_drag = null;

	};  /* end of function */


	this.__createBaseDIV = function(width, height)
	{
		var temp_div = document.createElement("div");
	//	myself.__id = "new_div" + (new Date()).getTime();
	//	temp_div.id = myself.__id;

		temp_div.style.width = width;
		temp_div.style.height = height;
		temp_div.style.background = "white";
		temp_div.style.position = "absolute";
		temp_div.style.top = new String(Menu4140.initY + Menu4140.array.length * Menu4140.initMoveY) + "px";
		temp_div.style.left = new String(Menu4140.initX + Menu4140.array.length * Menu4140.initMoveX) + "px";
	//	temp_div.style.paddingBottom = "10pt";
	//	temp_div.style.border = "4px solid black";

		return temp_div;
	};  /* end of function */

	this.__createHiddenDIV = function()
	{
		var temp_div = document.createElement("div");

		temp_div.style.position = "absolute";
		temp_div.style.display = "none";
		temp_div.style.border = Menu4140.hiddenDIVBorderWidth + " solid " + Menu4140.hiddenDIVBorderColor;
		temp_div.style.backgroundColor = Menu4140.hiddenDIVBgColor;
		temp_div.style.opacity = Menu4140.hiddenOpacity;

		return temp_div;

	};  /* end of function */

	this._createBody = function()
	{
		var temp_body = document.createElement("body");
		document.appendChild(temp_body);

		return temp_body;

	};  /* end of function */

	this.__createMenubar = function()
	{
		var p = document.createElement("p");
		p.align = "right";
		p.style.marginTop = "0px";
		p.style.marginBottom = "10px";
		p.style.background = Menu4140.menubarColor;
		p.style.padding = "4px";

	    //// create an anchor for the 'X' symbol

		var new_anchor = document.createElement("a");
		new_anchor.id = "new_anchor";
		new_anchor.style.cursor = "pointer";
		new_anchor.innerHTML = 
			"<font style=\"border:1px solid white;background:" +
			Menu4140.menubarButtonColor +
			";\" color=white><b>X</b></font>";

		new_anchor.addEventListener("mousedown", this.__preCloseDiv,  false);		// prevent dragging on the 'X' button.
		new_anchor.addEventListener("click", this.__closeDivEventHandler, false);	// click on the 'X' button.

	    //// insert the anchor into the paragraph

		p.appendChild(new_anchor);

		return p;

	};  /* end of function */

	this.__setBaseTableStyle = function(obj)
	{
		obj.style.width = "100%";
		obj.style.height = "100%";
		obj.className = "pop_dialog_table";

	};  /* end of function */

	this.__createCenterDIV = function()
	{
		var div = document.createElement("div");
		div.style.width = "100%";
		div.style.height = "100%";
		div.style.border = "1px solid black";
		div.style.padding = "0";
		return div;

	};  /* end of function */

	this.__createTable = function ()
	{
	/****
		Note: this is a requirement that the required CSS file is loaded.

		This is a 3x3 table:

		+----+------+----+
		| NW |  N   | NE |  <-- North TR
		+----+------+----+
		| W  | Main |  E |  <-- Center TR
		+----+------+----+
		| SW |  S   | SE |  <-- South TR
		+----+------+----+
		  ^     ^      ^
		  |     |      |
		West  Center  East
		 TD     TD     TD
	****/

		var ROWS = 3;
		var COLS = 3;

		var baseTable = null;

		baseTable = document.createElement("table");
		this.__setBaseTableStyle(baseTable);

		for(var i = 0; i < ROWS; i++)
		{
			var TRtemp = document.createElement("tr");
			for(var j = 0; j < COLS; j++)
			{
				var TDtemp = document.createElement("td");
				TDtemp.className = Menu4140.CSS_TD[i*COLS + j];
				TRtemp.appendChild(TDtemp);

				if(i*COLS+j == 4)
				{
					var centerDIV = this.__createCenterDIV()
					TDtemp.appendChild(centerDIV);
					this.__id = "new_div" + (new Date()).getTime();
					this.__center_div = centerDIV;
					this.__center_div.id = this.__id;
				}
			}

			baseTable.appendChild(TRtemp);
		}

		return baseTable;

	};  /* end of function */


/*********************\
 *                   *
 *  Public function  *
 *                   *
\*********************/

	this.init = function (width, height, close_func)
	{
	    //// body

		var temp_array = document.getElementsByTagName("body");
		if(!temp_array || temp_array.length == 0)
		{
			alert(
				"Strange! No body in this document!\n"
				+ "We have to abort the execution.\n"
			);
			return null;
		}
		else
			this.__body = temp_array[0];


	    //// create the base DIV

		var base_div = this.__createBaseDIV(width, height);

	    //// create the base table

		this.__base_table = this.__createTable();

	    //// create a hidden_div

		this.__hidden_div = this.__createHiddenDIV();

	    //// create a paragraph for the 'X' symbol

		var new_p = this.__createMenubar();

	    //// Insert all the things

		Menu4140.array.push(this);
		base_div.style.zIndex = new String(Menu4140.array.length);

		base_div.appendChild(this.__base_table);
		this.__center_div.appendChild(new_p);

		this.__body.appendChild(base_div);
		this.__body.appendChild(this.__hidden_div);

		this.__element_to_drag = base_div;		// move the entire DIV.
		this.__element_to_click = new_p;		// pls click on the menubar.
		this.__closing_function = close_func;		// this can be "null".

		this.__hidden_div.addEventListener("mousedown", this.__hiddenDragEventHandler, false);
		this.__element_to_click.addEventListener("mousedown", this.__dragEventHandler, false);
		this.__element_to_drag.addEventListener("click", this.__bringToFrontEventHandler, true);


		var parent = this.__center_div.parentNode;
		this.__center_div.style.width = parent.offsetWidth + "px";
		this.__center_div.style.height = parent.offsetHeight + "px";

		return this.__id;

	};  /* end of function */

	this.destroy = function() {
		this.__closeDivEventHandler();
	};  /* end of function */
}


